"use strict";(self.webpackChunkatri_utils_docs=self.webpackChunkatri_utils_docs||[]).push([[130],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,f=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return n?o.createElement(f,r(r({ref:t},d),{},{components:n})):o.createElement(f,r({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9126:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const i={title:"Create Media Response",description:"A function of the media-response file in atri-utils"},r=void 0,l={unversionedId:"image-utils/create-media-response",id:"image-utils/create-media-response",title:"Create Media Response",description:"A function of the media-response file in atri-utils",source:"@site/docs/image-utils/create-media-response.md",sourceDirName:"image-utils",slug:"/image-utils/create-media-response",permalink:"/image-utils/create-media-response",draft:!1,editUrl:"https://github.com/Atri-Labs/atri-utils-docs/tree/main/docs/image-utils/create-media-response.md",tags:[],version:"current",frontMatter:{title:"Create Media Response",description:"A function of the media-response file in atri-utils"},sidebar:"docs",previous:{title:"Image-utils",permalink:"/category/image-utils"},next:{title:"Parse Uploaded File",permalink:"/image-utils/parse-uploaded-file"}},p={},s=[{value:"UseCase",id:"usecase",level:3},{value:"1. Make sure atri-utils is imported on the top as:",id:"1-make-sure-atri-utils-is-imported-on-the-top-as",level:5},{value:"2. Code for the main.py to show the Uploaded Image on the frontend",id:"2-code-for-the-mainpy-to-show-the-uploaded-image-on-the-frontend",level:5},{value:"3. Now from the Frontend of the published app click on the Upload button and upload a valid image it will show up in the Image component specified",id:"3-now-from-the-frontend-of-the-published-app-click-on-the-upload-button-and-upload-a-valid-image-it-will-show-up-in-the-image-component-specified",level:5}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"usecase"},"UseCase"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"create_media_response")," function can be used to convert ",(0,a.kt)("inlineCode",{parentName:"p"},"file")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"image-data")," into a format which can be used by ",(0,a.kt)("inlineCode",{parentName:"p"},"Atri-engine's")," Image Component"),(0,a.kt)("p",null,"For example, you have to show a resultant image generated by your model/project, and you want to display it on the frontend you just have to follow 3 simple steps:-"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Example which we are using refers to a file uploaded by the user and wants to display it on the screen")),(0,a.kt)("h5",{id:"1-make-sure-atri-utils-is-imported-on-the-top-as"},"1. Make sure atri-utils is imported on the top as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from atri_utils import *\n")),(0,a.kt)("h5",{id:"2-code-for-the-mainpy-to-show-the-uploaded-image-on-the-frontend"},"2. Code for the main.py to show the Uploaded Image on the frontend"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def handle_event(at: Atri, req: Request, res: Response):\n    if at.Upload1.onChange:\n        if at.Upload1.io.files != None:\n            file = at.Upload.io.files[0]\n            at.Image.custom.src = create_media_response(file.file.read(), mime_type=file.content_type)\n")),(0,a.kt)("h5",{id:"3-now-from-the-frontend-of-the-published-app-click-on-the-upload-button-and-upload-a-valid-image-it-will-show-up-in-the-image-component-specified"},"3. Now from the Frontend of the published app click on the Upload button and upload a valid image it will show up in the Image component specified"),(0,a.kt)("p",null,"Note :- This function can be used with multiple data types including ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"filepath"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"BinaryIO")))}u.isMDXComponent=!0}}]);